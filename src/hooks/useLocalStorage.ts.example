// import { useState } from 'react';
// import AsyncStorage from '@react-native-async-storage/async-storage';

// const useLocalStorage = <T>(
// 	key: string,
// 	initialValue: T,
// ): [Promise<string | T>, typeof setValue] => {
// 	const [storedValue, setStoredValue] = useState(async (): Promise<string | T> => {
// 		try {
// 			const item = await AsyncStorage.getItem(key);
// 			console.log(1, item);
// 			return typeof item === 'string' ? JSON.parse(item) : initialValue;
// 		} catch (error) {
// 			return initialValue;
// 		}
// 	});

// 	const setValue = async (value: T): Promise<void> => {
// 		try {
// 			const valueToStore = value instanceof Function ? value(storedValue) : value;
// 			setStoredValue(valueToStore);
// 			console.log(2, valueToStore);
// 			await AsyncStorage.setItem(key, JSON.stringify(valueToStore));
// 		} catch (error) {
// 			//
// 		}
// 	};

// 	return [storedValue, setValue];
// };

// export default useLocalStorage;

// import AsyncStorage from '@react-native-async-storage/async-storage'
// import * as React from 'react'
// import log from '../utils/log'

// const useStoredState = <T>(
//   key: string,
//   defaultValue: T,
// ): [T, (newValue: T) => void, boolean] => {
//   const [state, setState] = React.useState({
//     hydrated: false,
//     storageValue: defaultValue,
//   })
//   const {hydrated, storageValue} = state

//   React.useEffect(() => {
//     const pullFromStorage = async () => {
//       let value = defaultValue
//       try {
//         const fromStorage = await AsyncStorage.getItem(key)
//         if (fromStorage) {
//           value = JSON.parse(fromStorage)
//         }
//       } catch (e) {
//         log('Could not read from storage for key: ', key, e)
//       }

//       return value
//     }
//     pullFromStorage().then((value) => {
//       setState({hydrated: true, storageValue: value})
//     })

//     // We don't want to update when the defaultValue changes
//     // eslint-disable-next-line react-hooks/exhaustive-deps
//   }, [key])

//   const updateStorage = React.useCallback(
//     async (newValue: T) => {
//       setState({hydrated: true, storageValue: newValue})
//       const stringifiedValue = JSON.stringify(newValue)
//       await AsyncStorage.setItem(key, stringifiedValue)
//     },
//     [key],
//   )

//   return [storageValue, updateStorage, hydrated]
// }

// export default useStoredState
